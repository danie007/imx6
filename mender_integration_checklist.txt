Mender integration checklist - https://docs.mender.io/2.3/devices/yocto-project/bootloader-support/u-boot/integration-checklist

1. u-boot-fw-utils tools are present on the device
2. U-Boot bootloader and u-boot-fw-utils agree on the format for the U-Boot environment.
3. correct kernel is loaded from partition A
4. correct kernel is loaded from partition B
5. correct rootfs is mounted when partition A is active
6. correct rootfs is mounted when partition B is active rollback works
7. Mender daemon is started as a service

Initial configuration:

a. As part of the test, we will need two different Linux kernels, in order to verify that both are booted correctly when they should. Therefore, before building the images you will test with, run the commands
    `bitbake -c cleansstate linux-fslc-imx core-image-full-cmdline && bitbake core-image-full-cmdline`  # This will delete all the output images and perform a fresh build

b. Copy the resulting `.sdimg` file to a safe location, for example `base-image.sdimg` and then repeat step a.

c. Load second kernel in the second partition. Run the following commands:
    ```
    sudo kpartx -av base-image.sdimg    # Add partition mappings
    sudo dd if=tmp/deploy/images/<machine>/<image>.ext4 of=/dev/mapper/loop0p3  # Copy the newer kernel into old sdimg's second partition
    sync
    sudo kpartx -d base-image.sdimg # Delete partition mappingsq
    ```
d. Flash the base-image.sdimg image to the device, boot it and follow along.

NOTE: Enter the following commands in u-boot prompt (manual patch)
    ```
    setenv bootargs fec.macaddr=0xde,0xad,0xbe,0xef,0x00,0x01 # Sets MAC address - from i.MX_BSP_Porting_Guide.pdf 9.1.3

    setenv clear_tmp "setenv board_name; setenv board_rev; setenv boot_count; setenv fdtcontroladdr; setenv fileaddr; setenv filesize"

    setenv bootcmd "run clear_tmp; setenv bootcount 0; run mender_setup; setenv bootargs root='${mender_kernel_root}' '${bootargs}'; if test '"${fdt_addr_r}"' != '""'; then load '${mender_uboot_root}' '${fdt_addr_r}' /boot/'${mender_dtb_name}'; fi; load '${mender_uboot_root}' '${kernel_addr_r}' /boot/'${mender_kernel_name}'; '${mender_boot_kernel_type}' '${kernel_addr_r}' - '${fdt_addr_r}'; run mender_try_to_recover"

    saveenv
    ```

NOTE: enabling network service
    ```
    crontab -e
    @reboot /sbin/udhcpc -i eth1
    ```

1 & 2. Now we will test that storing and reading values in the U-Boot environment works. Run:
        `fw_setenv mender_linux_test 1`

    Reboot, and interrupt U-Boot so you get the U-Boot prompt. Run:
        `printenv mender_linux_test`
    The output should be: `mender_linux_test=1`

    While still at the U-Boot prompt, run:
        ```
        setenv mender_uboot_test 1
        saveenv
        run bootcmd
        ```

    You should be back inside Linux now, so run:
        `fw_printenv mender_uboot_test`
    The output should be: `mender_uboot_test=1`

3 & 5.  Now we will look at which rootfs is mounted. Run mount with no arguments. The file system mounted as root (signified by the <device> on / entry) should be:
        `mount`

    - /dev/mmcblk1p2 when using SD card or eMMC storage.

    run `cat /proc/version` to verify that it belongs to old build.

    Alternate method:
        ```
        stat -c %D /
        stat -c %t%02T /dev/mmcblk1p2
        ```
        The output of the two commands should be identical. 
    
    This verifies that the correct rootfs is mounted when partition A is active.

4 & 6. We will now verify both kernel and rootfs for partition B. Run the following:
        ```
        fw_setenv mender_boot_part 3
        fw_setenv mender_boot_part_hex 3
        ```
    Reboot and run `cat /proc/version` to verify that it belongs to newer build.

    This is because we replaced the kernel of the second rootfs partition with a newer one. This verifies that the correct kernel is loaded from partition B.

        ```
        stat -c %D /
        stat -c %t%02T /dev/mmcblk1p3
        ```
        The output of the two commands should be identical.

    ROLLBACK:
        a. Schedule an update of the rootfs.
            ```
            fw_setenv mender_boot_part 2
            fw_setenv mender_boot_part_hex 2
            fw_setenv upgrade_available 1
            fw_setenv bootcount 0
            ```
        b. interrupt the boot process before the system has had time to finish booting (Mender will auto-commit the update if it is enabled as a service, which will defeat the purpose of this test, so it's important that the power is cut after the kernel has started booting, but before Mender has started)

        c. Restore power and run the command `mount`. The detected device should not be /dev/mmcblk0p2 (ubi0_0), this indicates that the rollback has not worked.

7. `pidof mender`
    it should return a PID. If not, it should return nothing. This verifies that Mender is started as a service if applicable.



REF:
 old: /dev/mmcblk1p2 on / type ext4 - Linux version 4.9.67-fslc+g953c6e30c970 #1 SMP PREEMPT Thu May 14 08:06:01 UTC 2020

 new: /dev/mmcblk1p3 on / type ext4 - Linux version 4.9.67-fslc+g953c6e30c970 #1 SMP PREEMPT Mon May 25 12:32:04 UTC 2020
