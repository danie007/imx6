#!/bin/zsh

#   Created on 03.01.2020
#   CHANGELOG:
#   Added file extensions for compatibility
#   Daniel D, Jamsin Infotech

# rm -rf u-boot
# mkdir u-boot
# cd u-bo
# echo "Creating u-boot.csf"

# cat <<EOT >u-boot.csf
# [Header]
# Version = 4.1
# Hash Algorithm = SHA256
# Engine = ANY
# Engine Configuration = 0
# Certificate Format = X509
# Signature Format = CMS

# [Install SRK]
# File = "../crts/SRK_1_2_3_4_table.bin" Source index = 0    # Update as generated

# [Install CSFK]
# File = "../crts/CSF1_1_sha256_2048_65537_v3_usr_crt.pem"    # Update as generated

# [Authenticate CSF]

# [Install Key]
# Verification index = 0
# Target index = 2
# File = "../crts/IMG1_1_sha256_2048_65537_v3_usr_crt.pem"    # Update as generated
# # Sign padded u-boot starting at the IVT through to the end with
# # length = 0x2F000 (padded u-boot length) - 0x400 (IVT offset) = 0x2EC00
# # This covers the essential parts: IVT, boot data and DCD.
# # Blocks have the following definition:
# # Image block start address on i.MX, Offset from start of image file, # Length of block in bytes, image data file

# [Authenticate Data]
# Verification index = 2
# Blocks = 0x27800400 0x400 0x2EC00 "u-boot-pad.bin"
# EOT

# echo ""
# echo "Creating a secure U-Boot image generation script"
# echo ""

# cat <<EOT >habimagegen.sh
# #! /bin/bash

# echo "extend u-boot to 0x2F000..."
# objcopy -I binary -O binary --pad-to 0x2f000 --gap-fill=0x5A u-boot.bin u-boot-pad.bin

# echo "generate csf data..."
# ../osx/bin/cst -o u-boot_csf.bin -i u-boot.csf

# echo "merge image and csf data..."
# cat u-boot-pad.bin u-boot_csf.bin > u-boot-signed.bin

# echo "extend final image to 0x31000..."
# objcopy -I binary -O binary --pad-to 0x31000 --gap-fill=0x5A u-boot-signed.bin u-boot-signed-pad.bin

# echo "u-boot-signed-pad.bin is ready"
# EOT

# bash habimagegen.sh

rm -rf uImage
mkdir uImage
cd uImage

echo "Creating IVT generator script"

cat <<EOT >genIVT.pl
#! /usr/bin/perl -w
use strict;

open(my \$out, '>:raw', 'ivt.bin') or die "Unable to open: $!";
print \$out pack("V", 0x402000D1); # Signature
print \$out pack("V", 0x10801000); # Jump Location
print \$out pack("V", 0x0); # Reserved
print \$out pack("V", 0x0); # DCD pointer
print \$out pack("V", 0x0); # Boot Data
print \$out pack("V", 0x10BFDFE0); # Self Pointer
print \$out pack("V", 0x10BFE000); # CSF Pointer
print \$out pack("V", 0x0); # Reserved
close(\$out);
EOT

echo "Creating File habUimagegen.sh"

cat <<EOT >habUimagegen.sh
#! /bin/bash

echo "extend uImage to 0x3FDFE0..."
objcopy -I binary -O binary --pad-to 0x3fdfe0 --gap-fill=0x5A uImage uImage-pad.bin

echo "generate IVT"
perl genIVT.pl

echo "attach IVT..."
cat uImage-pad.bin ivt.bin > uImage-pad-ivt.bin

echo "generate csf data..."
../osx/bin/cst -o uImage_csf.bin -i uImage.csf

echo "merge image and csf data..."
cat uImage-pad-ivt.bin uImage_csf.bin > uImage-signed.bin

echo "extend final image to 0x400000..."
objcopy -I binary -O binary --pad-to 0x400000 --gap-fill=0x5A uImage-signed.bin uImage-signed-pad.bin
EOT

echo "Creating file uImage.csf"

cat <<EOT >uImage.csf
[Header]
Version = 4.0
# Security Configuration = Open
Hash Algorithm = SHA256
Engine Configuration = 0
Certificate Format = X509
Signature Format = CMS

[Install SRK]
File = "../crts/SRK_1_2_3_4_table.bin" Source index = 0    # Update as generated

[Install CSFK]
File = "../crts/CSF1_1_sha256_2048_65537_v3_usr_crt.pem"    # Update as generated

[Authenticate CSF]

[Install Key]
Verification index = 0
Target index = 2
File = "../crts/IMG1_1_sha256_2048_65537_v3_usr_crt.pem"    # Update as generated
# Sign padded uImage start at address 0x10800000
# length = 0x3FE0000
# This covers the essential parts: original uImage and the attached IVT # Blocks have the following definition:
# Image block start address on i.MX, Offset from start of image file, # Length of block in bytes, image data file [Authenticate Data]
Verification index = 2
Blocks = 0x10800000 0x0 0x003FE000 "uImage-pad-ivt.bin"
EOT

echo "Building uImage"
bash habUimagegen.sh
